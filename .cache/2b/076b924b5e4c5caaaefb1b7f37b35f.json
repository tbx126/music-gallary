{"id":"node_modules/lrc-parser/index.js","dependencies":[{"name":"C:\\Users\\tbx12\\Desktop\\music gallary\\package.json","includedInParent":true,"mtime":1689254890190},{"name":"C:\\Users\\tbx12\\Desktop\\music gallary\\node_modules\\lrc-parser\\package.json","includedInParent":true,"mtime":1689254890027},{"name":"os","loc":{"line":1,"column":52,"index":52},"parent":"C:\\Users\\tbx12\\Desktop\\music gallary\\node_modules\\lrc-parser\\index.js","resolved":"C:\\Users\\tbx12\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\os-browserify\\browser.js"}],"generated":{"js":"const EOL = typeof window === 'undefined' ? require('os').EOL : '\\n'\r\n\r\n/**\r\n * \r\n * @param {string} data \r\n * @example [length: 03:36]\r\n * @return {<Array>{string}} ['length', '03:06']\r\n */\r\n\r\nfunction extractInfo(data) {\r\n  const info = data.trim().slice(1, -1) // remove brackets: length: 03:06\r\n  return info.split(': ')\r\n}\r\n\r\nfunction lrcParser(data) {\r\n  if (typeof data !== 'string') {\r\n    throw new TypeError('expect first argument to be a string')\r\n  }\r\n  // split a long stirng into lines by system's end-of-line marker line \\r\\n on Windows\r\n  // or \\n on POSIX\r\n  let lines = data.split(EOL)\r\n  const timeStart = /\\[(\\d*\\:\\d*\\.?\\d*)\\]/ // i.g [00:10.55]\r\n  const scriptText = /(.+)/ // Havana ooh na-na (ayy) \r\n  const timeEnd = timeStart\r\n  const startAndText = new RegExp(timeStart.source + scriptText.source)\r\n\r\n\r\n  const infos = []\r\n  const scripts = []\r\n  const result = {}\r\n\r\n  for(let i = 0; startAndText.test(lines[i]) === false; i++) {\r\n    infos.push(lines[i])\r\n  }\r\n\r\n  infos.reduce((result, info) => {\r\n    const [key, value] = extractInfo(info)\r\n    result[key] = value\r\n    return result\r\n  }, result)\r\n\r\n  lines.splice(0, infos.length) // remove all info lines\r\n  const qualified = new RegExp(startAndText.source + '|' + timeEnd.source)\r\n  lines = lines.filter(line => qualified.test(line))\r\n  \r\n  for (let i = 0, l = lines.length; i < l; i++) {\r\n    const matches = startAndText.exec(lines[i])\r\n    const timeEndMatches = timeEnd.exec(lines[i + 1])  \r\n    if (matches && timeEndMatches) {\r\n      const [, start, text] = matches\r\n      const [, end] = timeEndMatches\r\n      scripts.push({\r\n        start: convertTime(start),\r\n        text,\r\n        end: convertTime(end),\r\n      })\r\n    }\r\n  }\r\n\r\n  result.scripts = scripts\r\n  return result\r\n}\r\n\r\n// convert time string to seconds\r\n// i.g: [01:09.10] -> 69.10\r\nfunction convertTime(string) {\r\n  string = string.split(':');\r\n  const minutes = parseInt(string[0], 10)\r\n  const seconds = parseFloat(string[1])\r\n  if (minutes > 0) {\r\n    const sc = minutes * 60 + seconds\r\n    return parseFloat(sc.toFixed(2))\r\n  }\r\n  return seconds\r\n}\r\n\r\nmodule.exports = lrcParser\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/lrc-parser/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/lrc-parser/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}}],"sources":{"node_modules/lrc-parser/index.js":"const EOL = typeof window === 'undefined' ? require('os').EOL : '\\n'\r\n\r\n/**\r\n * \r\n * @param {string} data \r\n * @example [length: 03:36]\r\n * @return {<Array>{string}} ['length', '03:06']\r\n */\r\n\r\nfunction extractInfo(data) {\r\n  const info = data.trim().slice(1, -1) // remove brackets: length: 03:06\r\n  return info.split(': ')\r\n}\r\n\r\nfunction lrcParser(data) {\r\n  if (typeof data !== 'string') {\r\n    throw new TypeError('expect first argument to be a string')\r\n  }\r\n  // split a long stirng into lines by system's end-of-line marker line \\r\\n on Windows\r\n  // or \\n on POSIX\r\n  let lines = data.split(EOL)\r\n  const timeStart = /\\[(\\d*\\:\\d*\\.?\\d*)\\]/ // i.g [00:10.55]\r\n  const scriptText = /(.+)/ // Havana ooh na-na (ayy) \r\n  const timeEnd = timeStart\r\n  const startAndText = new RegExp(timeStart.source + scriptText.source)\r\n\r\n\r\n  const infos = []\r\n  const scripts = []\r\n  const result = {}\r\n\r\n  for(let i = 0; startAndText.test(lines[i]) === false; i++) {\r\n    infos.push(lines[i])\r\n  }\r\n\r\n  infos.reduce((result, info) => {\r\n    const [key, value] = extractInfo(info)\r\n    result[key] = value\r\n    return result\r\n  }, result)\r\n\r\n  lines.splice(0, infos.length) // remove all info lines\r\n  const qualified = new RegExp(startAndText.source + '|' + timeEnd.source)\r\n  lines = lines.filter(line => qualified.test(line))\r\n  \r\n  for (let i = 0, l = lines.length; i < l; i++) {\r\n    const matches = startAndText.exec(lines[i])\r\n    const timeEndMatches = timeEnd.exec(lines[i + 1])  \r\n    if (matches && timeEndMatches) {\r\n      const [, start, text] = matches\r\n      const [, end] = timeEndMatches\r\n      scripts.push({\r\n        start: convertTime(start),\r\n        text,\r\n        end: convertTime(end),\r\n      })\r\n    }\r\n  }\r\n\r\n  result.scripts = scripts\r\n  return result\r\n}\r\n\r\n// convert time string to seconds\r\n// i.g: [01:09.10] -> 69.10\r\nfunction convertTime(string) {\r\n  string = string.split(':');\r\n  const minutes = parseInt(string[0], 10)\r\n  const seconds = parseFloat(string[1])\r\n  if (minutes > 0) {\r\n    const sc = minutes * 60 + seconds\r\n    return parseFloat(sc.toFixed(2))\r\n  }\r\n  return seconds\r\n}\r\n\r\nmodule.exports = lrcParser\r\n"},"lineCount":78}},"error":null,"hash":"3e2482dfb7a15d1cec85a78cbb882eee","cacheData":{"env":{}}}